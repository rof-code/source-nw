{"remainingRequest":"C:\\Users\\rjj20\\Desktop\\new_white_local\\newwhite-vue\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\rjj20\\Desktop\\new_white_local\\newwhite-vue\\src\\components\\gerais\\duvidasHome.vue?vue&type=template&id=5dbb632c&scoped=true&","dependencies":[{"path":"C:\\Users\\rjj20\\Desktop\\new_white_local\\newwhite-vue\\src\\components\\gerais\\duvidasHome.vue","mtime":1626879779069},{"path":"C:\\Users\\rjj20\\Desktop\\new_white_local\\newwhite-vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1625689018811},{"path":"C:\\Users\\rjj20\\Desktop\\new_white_local\\newwhite-vue\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":1625689037702},{"path":"C:\\Users\\rjj20\\Desktop\\new_white_local\\newwhite-vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1625689018811},{"path":"C:\\Users\\rjj20\\Desktop\\new_white_local\\newwhite-vue\\node_modules\\vue-loader\\lib\\index.js","mtime":1625689037694}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}